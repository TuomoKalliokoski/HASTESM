import os
import sqlite3
from logging import Logger
from pathlib import Path
from typing import List

from ..hastesm_types import HastesmParams
from ..utils import run_command


def export_matches(output_filename: Path, db: Path, matches_db: Path, mae_format_version: str) -> None:
	"""Export the matches of the search to a MAE file

	Args:
	----
		output_filename: Path to the output file
		db: Path to the HASTESM SMILES database
		matches_db: Path to the shape matching database generated by import_search
		mae_format_version: Maestro format version

	Raises:
	------
		ValueError: If the matches_db does not exist

	Returns:
	-------
		Path to the exported MAE file

	"""
	if not matches_db.exists():
		raise ValueError(f'{matches_db} does not exist')

	conn = sqlite3.connect(matches_db)
	c = conn.cursor()
	c.execute(f'ATTACH DATABASE "{db}" AS d')

	query = """
    SELECT structure
    FROM searching_data
    ORDER BY searching_data.similarity DESC
    """

	with open(output_filename, 'wt') as f:
		f.write('{\n  s_m_m2io_version\n  :::\n  ' + mae_format_version + '\n}\n\n')

		for st in c.execute(query):
			f.write(st[0])

	conn.close()


def export_smiles(name: str, db: Path, output_dir: Path, search_db: Path, delim: str = ' ') -> Path:
	"""Export the matches of the search to a SMILES file

	Args:
	----
		name: Name of the job
		db: Path to the HASTESM SMILES database
		output_dir: Path to the output directory
		search_db: Path to the search database generated by import_search
		delim: Delimiter for SMILES file (default: space)

	Raises:
	------
		ValueError: If the search_db does not exist

	Returns:
	-------
		Path to the exported SMILES file

	"""
	if not search_db.exists():
		raise ValueError(f'{search_db} does not exist')

	conn = sqlite3.connect(search_db)
	c = conn.cursor()
	c.execute(f'ATTACH DATABASE "{db}" AS d')

	output_filename = output_dir / f'{name}_hastesm_results.smi'

	query = """
    SELECT smiles,smilesid,similarity
    FROM data
    JOIN searching_data ON data.hastenid = searching_data.hastenid
    ORDER BY similarity DESC
    """

	with open(output_filename, 'wt') as f:
		for smiles, smilesid, similarity in c.execute(query):
			f.write(delim.join([smiles, smilesid, str(similarity)]) + '\n')

	conn.close()

	return output_filename


def export(params: HastesmParams, logger: Logger, job_ids: List[str]) -> None:
	"""Export the matches of the search to a mae.gz file

	Args:
	----
		params: Parsed HastesmParams from the main file
		logger: logging.Logger instance
		job_ids: List of slurm job ids (unused)

	"""
	output_filename = params.output_dir / f'matched_{params.name}.mae'
	export_matches(output_filename, params.db, params.matches_db, params.mae_format_version)

	# Compress matches
	run_command(['pigz', '-f', output_filename], 'Error compressing matches', logger)

	maegz_name = str(output_filename).replace(".mae", ".maegz")
	os.rename(str(output_filename) + ".gz", maegz_name)
	logger.info(f"Exported matches to {maegz_name})")

    # Export SMILES without similarity cutoff applied (output all)
	export_smiles(params.name, params.db, params.output_dir, params.search_db)
	logger.info(f"Exported all similarity scores to {params.name}_hastesm_results.smi")
