import sqlite3
from logging import Logger
from pathlib import Path
from typing import List

from ..generate_slurm_scripts import generate_confgen_script
from ..hastesm_types import ConfgenParams, HastesmParams
from ..utils import submit_slurm_job, wait_for_job


def pick_compounds_for_searching(
	confgen_params: ConfgenParams,
	name: str,
	db: Path,
	output_dir: Path,
	conf_cpu: int,
	query: Path,
	delim: str,
	search_db: Path,
	pred_db: Path,
	iteration: int,
	number_of_mols: int,
	logger: Logger,
) -> None:
	"""Pick set of compounds from database for shape matching and save them into output files

	Args:
	----
		confgen_params: Parsed arguments for conformer generation
		name: Name of the job
		db: Path to the HASTESM SMILES database
		output_dir: Path to the output directory
		conf_cpu: Number of confgen CPUs
		query: Path to the query SDF file
		delim: Delimiter for the SMILES file
		search_db: Path to the search database generated by import_search
		pred_db: Path to the HASTESM prediction database
		iteration: Shape matching iteration number (1 or 2)
		number_of_mols: Number of molecules to pick for shape matching
		logger: logging.Logger instance

	Raises:
	------
		ValueError: If iteration is not 1 and the search_db or pred_db do not exist

	"""
	base_size = number_of_mols // conf_cpu
	remainder = number_of_mols % conf_cpu

	logger.info(f'Molecules per CPU: {base_size}')

	conn = sqlite3.connect(db)
	c = conn.cursor()

	if iteration == 1:
		to_search = c.execute(
			'SELECT smiles,hastenid FROM data ORDER BY random() LIMIT ?',
			[
				number_of_mols,
			],
		).fetchall()
	else:
		if not search_db.is_file():
			raise ValueError(f'Shape searching database ({search_db}) missing.')
		if not pred_db.is_file():
			raise ValueError(f'Predictions database ({pred_db}) missing.')

		c.execute(f'ATTACH DATABASE "{search_db}" AS d')
		c.execute(f'ATTACH DATABASE "{pred_db}" AS p')

		sql_query = """
        SELECT smiles, data.hastenid
        FROM data
        JOIN pred_data ON data.hastenid = pred_data.hastenid
        WHERE data.hastenid NOT IN (SELECT hastenid FROM searching_data)
        ORDER BY pred_data.pred_score DESC LIMIT ?
        """

		to_search = c.execute(
			sql_query,
			[
				number_of_mols,
			],
		).fetchall()

	conn.close()

	chunk_sizes = [base_size + 1 if i < remainder else base_size for i in range(conf_cpu)]

	start = 0
	for cpu_id, chunk_size in enumerate(chunk_sizes, start=1):
		outputfile = output_dir / f'{name}_iter{iteration}_cpu{cpu_id}.smi'

		with open(outputfile, 'wt') as f:
			end = start + chunk_size
			chunk = to_search[start:end]

			for smiles, hastenid in chunk:
				f.write(f'{smiles}{delim}{hastenid}\n')

			start = end

	# create inputs for conformation generation
	for i in range(1, conf_cpu + 1):
		outputfile = output_dir / f'{name}_iter{iteration}_cpu{i}.inp'

		w = open(outputfile, 'wt')
		w.write('[SET:ORIGINAL_LIGANDS]\n')
		w.write('    VARCLASS   Structures\n')
		w.write(f'    FILES   {name}_iter{iteration}_cpu{i}.smi,\n')
		w.write('\n')
		w.write('[STAGE:LIGPREP]\n')
		w.write('    STAGECLASS   ligprep.LigPrepStage\n')
		w.write('    INPUTS   ORIGINAL_LIGANDS,\n')
		w.write('    OUTPUTS   LIGPREP_OUT,\n')
		w.write('    RECOMBINE   YES\n')
		w.write('    RETITLE   YES\n')
		w.write('    MIXLIGS   YES\n')
		w.write('    SKIP_BAD_LIGANDS   YES\n')
		w.write('    UNIQUEFIELD   s_m_title\n')
		w.write('    OUTCOMPOUNDFIELD   s_m_title\n')
		w.write('    USE_EPIK   YES\n')
		w.write('    METAL_BINDING   NO\n')
		w.write('    PH   7.0\n')
		w.write('    PHT   2.0\n')
		w.write('    NRINGCONFS   1\n')
		w.write('    COMBINEOUTS   NO\n')
		w.write('    STEREO_SOURCE   parities\n')
		w.write('    NUM_STEREOISOMERS   32\n')
		w.write('    REGULARIZE   NO\n')
		w.write('\n')
		w.write('[STAGE:POSTLIGPREP]\n')
		w.write('    STAGECLASS   ligprep.PostLigPrepStage\n')
		w.write('    INPUTS   LIGPREP_OUT,\n')
		w.write('    OUTPUTS   POSTLIGPREP_OUT,\n')
		w.write('    UNIQUEFIELD   s_m_title\n')
		w.write('    OUTVARIANTFIELD   s_phase_variant\n')
		w.write('    PRESERVE_NJOBS   YES\n')
		w.write('    LIMIT_STEREOISOMERS   YES\n')
		w.write('    MAXSTEREO   4\n')
		w.write('    REMOVE_PENALIZED_STATES   YES\n')
		w.write('\n')
		w.write('[STAGE:MANAGE]\n')
		w.write('    STAGECLASS   phase.DBManageStage\n')
		w.write('    INPUTS   POSTLIGPREP_OUT,\n')
		w.write('    OUTPUTS   DATABASE,\n')
		w.write(f'    DATABASE  {name}_iter{iteration}_cpu{i}.phdb\n')
		w.write('    NEW   YES\n')
		w.write('    MULTIPLE_CONFS   NO\n')
		w.write('    CONSIDER_STEREO   NO\n')
		w.write('    GENERATE_PROPS   NO\n')
		w.write('    CREATE_SUBSET   NO\n')
		w.write('    SKIP_DUPLICATES   NO\n')
		w.write('\n')
		w.write('[STAGE:CONFSITES]\n')
		w.write('    STAGECLASS   phase.DBConfSitesStage\n')
		w.write('    INPUTS   DATABASE,\n')
		w.write('    CONFS   auto\n')
		w.write(f'    MAX_CONFS   {confgen_params.numconfs}\n')
		w.write(f'    ENERGY_WINDOW    {confgen_params.energywindow}\n')
		if confgen_params.minimize:
			w.write('    MINIMIZE_FFLD   S-OPLS\n')
		w.write('    GENERATE_PROPS   YES\n')
		w.write(f'    MAX_PER_ROT_BOND    {confgen_params.maxrotbond}\n')
		w.write(f'    AMIDE_MODE    {confgen_params.amide}\n')
		w.write(f'    SAMPLE_METHOD   {confgen_params.sample}\n')
		w.write('\n')
		w.write('[USEROUTS]\n')
		w.write('    USEROUTS   DATABASE,\n')
		w.close()

	# create commands for search
	for i in range(1, conf_cpu + 1):
		outputfile = output_dir / f'shapematching_{name}_iter{iteration}_cpu{i}.sh'

		w = open(outputfile, 'wt')
		w.write(
			f'$SCHRODINGER/shape_screen -shape {query} -screen `pwd`/{name}_iter{iteration}_cpu{i}.phdb'
			f' -JOB {name}_iter{iteration}_cpu{i} -norm 1 -HOST localhost:1 -WAIT\n'
		)
		w.close()


def confgen(
	params: HastesmParams, confgen_params: ConfgenParams, logger: Logger, job_ids: List[str], iteration: int
) -> None:
	"""Generate conformers for shape matching

	Args:
	----
		params: Parsed HastesmParams from the main file
		confgen_params: Parsed arguments for conformer generation
		logger: logging.Logger instance
		job_ids: List of slurm job ids where the confgen job id is added
		iteration: Shape matching iteration number (1 or 2)

	"""
	number_of_mols = params.mols_iter1 if iteration == 1 else params.mols_iter2

	logger.info(f'Picking {number_of_mols} compounds for iteration {iteration} shape matching')

	pick_compounds_for_searching(
		confgen_params,
		params.name,
		params.db,
		params.output_dir,
		params.conf_cpu,
		params.query,
		params.delim,
		params.search_db,
		params.pred_db,
		iteration,
		number_of_mols,
		logger,
	)

	confgen_script_path = generate_confgen_script(
		params.name,
		params.output_dir,
		params.local_dir,
		params.cpu_partition,
		params.conf_cpu,
		iteration,
		params.debug,
	)
	confgen_jobid = submit_slurm_job(confgen_script_path, logger)

	job_ids.append(confgen_jobid)

	logger.info(f'Submitting confgen job with ID {confgen_jobid}')

	wait_for_job(confgen_jobid, job_ids)

	logger.info(f'Confgen job {confgen_jobid} completed')
